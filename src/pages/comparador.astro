---
import Base from "@/layouts/Base.astro";
import { buildLinks } from "@/lib/price-links";

const TITLE = "Comparador de precios (informativo)";

const countries = [
  { code: "ES", label: "EspaÃ±a (ES)" },
  { code: "US", label: "Estados Unidos (US)" },
  { code: "MX", label: "MÃ©xico (MX)" },
  { code: "AR", label: "Argentina (AR)" },
  { code: "CO", label: "Colombia (CO)" },
  { code: "CL", label: "Chile (CL)" },
  { code: "PE", label: "PerÃº (PE)" },
];
---

<Base title={`Teknovashop Â· ${TITLE}`} description="Sube una foto o pega una URL, la IA identifica el producto y te generamos bÃºsquedas informativas de precio.">
  <h1>{TITLE}</h1>
  <p class="small">Introduce un producto, <b>o</b> pega una URL del producto, <b>o</b> sube una imagen. 
  Nosotros identificamos y te creamos bÃºsquedas en tiendas y paÃ­ses. <b>No vendemos ni afiliamos</b>: es informativo.</p>

  <div class="card" style="padding:1rem; margin:1rem 0;">
    <form id="cmp-form" on:submit="return false;">
      <div class="row">
        <label>Producto (texto) <span class="hint">marca + modelo</span></label>
        <input id="q" type="text" placeholder="Ej: Samsung Odyssey G5 27 144Hz" />
      </div>

      <div class="row">
        <label>URL de producto (opcional)</label>
        <input id="pageUrl" type="url" placeholder="Pega aquÃ­ la URL de la ficha de producto" />
      </div>

      <div class="row">
        <label>Imagen (opcional)</label>
        <input id="image" type="file" accept="image/*" />
      </div>

      <div class="row">
        <label>PaÃ­s</label>
        <select id="country">
          {countries.map(c => <option value={c.code}>{c.label}</option>)}
        </select>
      </div>

      <div class="row gap">
        <button id="btn-identify" class="btn" type="button">ðŸ”Ž Identificar con IA</button>
        <button id="btn-build" class="btn" type="button">Generar comparativas</button>
      </div>

      <div id="ia-result" class="small" style="margin-top:.6rem; display:none;"></div>
    </form>
  </div>

  <div id="links-wrap" class="grid" style="display:none;">
    <div class="card pad">
      <h3>Metabuscadores</h3>
      <div id="meta" class="links"></div>
    </div>
    <div class="card pad">
      <h3>Marketplaces</h3>
      <div id="mkt" class="links"></div>
    </div>
    <div class="card pad">
      <h3>Comparadores</h3>
      <div id="comp" class="links"></div>
    </div>
  </div>

  <style>
    .row{ display:flex; flex-direction:column; gap:.35rem; margin:.6rem 0; }
    .row input, .row select{
      background:#0f151b; color:#eaf3f7; border:1px solid rgba(255,255,255,.08); 
      border-radius:10px; padding:.65rem .75rem; outline:none;
    }
    .row input:focus, .row select:focus{ border-color:#00c4c7; }
    .hint{ font-weight:400; opacity:.8; margin-left:.3rem; }
    .gap{ display:flex; gap:.5rem; flex-wrap:wrap; }
    .btn{ background:#00c4c7; color:#00292b; border:0; padding:.6rem .9rem; border-radius:10px; font-weight:800; cursor:pointer; }
    .btn:hover{ filter:brightness(.95); }
    .grid{ display:grid; gap:1rem; grid-template-columns: repeat(auto-fill,minmax(260px,1fr)); margin:1rem 0 2rem; }
    .card.pad{ padding:1rem; }
    .links a{ display:inline-block; margin:.3rem .5rem .3rem 0; }
    .small{ color:#9fb3b8; }
  </style>

  <script is:raw>
    const $ = (q)=>document.querySelector(q);
    const byId = (id)=>document.getElementById(id);

    async function toDataURL(file){
      const b64 = await new Promise((res,rej)=>{
        const r = new FileReader();
        r.onload = ()=> res(r.result);
        r.onerror = rej;
        r.readAsDataURL(file);
      });
      return b64;
    }

    byId('btn-identify').addEventListener('click', async ()=>{
      const q = byId('q').value.trim();
      const pageUrl = byId('pageUrl').value.trim();
      const file = byId('image').files?.[0];
      let imageDataUrl = null;
      if (file) imageDataUrl = await toDataURL(file);

      byId('ia-result').style.display = 'block';
      byId('ia-result').innerText = 'Analizando con IA...';

      const res = await fetch('/api/identify-product', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ imageDataUrl, pageUrl, hint: q })
      });
      const data = await res.json();
      if (data.error) {
        byId('ia-result').innerText = 'Error: ' + (data.detail || data.error);
        return;
      }
      const query = data.query || q;
      byId('q').value = query;
      const attrs = (data.attrs || []).join(' Â· ');
      const conf = typeof data.confidence==='number' ? ` (confianza ${(data.confidence*100).toFixed(0)}%)` : '';
      byId('ia-result').innerHTML = `<b>Query sugerida:</b> ${query}${conf}${attrs ? '<br/><span class="small">Atributos: '+attrs+'</span>':''}`;
    });

    byId('btn-build').addEventListener('click', ()=>{
      const q = byId('q').value.trim();
      const c = byId('country').value || 'ES';
      if (!q) return alert('Escribe o identifica primero el producto');

      // Construimos enlaces en el cliente (sin afiliados).
      fetch('/__build-links', { // endpoint virtual; lo hacemos en el client con lÃ³gica duplicada
        method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ q, c })
      }).catch(()=>{ /* noop */ });

      // replicamos la funciÃ³n buildLinks en el cliente:
      function buildLinks(q, country) {
        const s = encodeURIComponent(q.trim());
        const googleWeb = `https://www.google.com/search?q=${s}`;
        const googleShopping = `https://www.google.com/search?tbm=shop&q=${s}`;
        const amazon = ({ES:`https://www.amazon.es/s?k=${s}`,MX:`https://www.amazon.com.mx/s?k=${s}`,US:`https://www.amazon.com/s?k=${s}`}[country]) || `https://www.amazon.com/s?k=${s}`;
        const ebay = ({ES:`https://www.ebay.es/sch/i.html?_nkw=${s}`,US:`https://www.ebay.com/sch/i.html?_nkw=${s}`,MX:`https://www.ebay.com/sch/i.html?_nkw=${s}`}[country]) || `https://www.ebay.com/sch/i.html?_nkw=${s}`;
        const mercadolibre = ({AR:`https://listado.mercadolibre.com.ar/${s}`,MX:`https://listado.mercadolibre.com.mx/${s}`,CO:`https://listado.mercadolibre.com.co/${s}`,CL:`https://listado.mercadolibre.cl/${s}`,PE:`https://listado.mercadolibre.com.pe/${s}`}[country]);
        const comparadores = ({
          ES:[{name:"Idealo",url:`https://www.idealo.es/precios.aspx?q=${s}`},{name:"PcComponentes (buscador)",url:`https://www.pccomponentes.com/buscar/?query=${s}`}],
          MX:[{name:"Google Shopping (MX)",url:googleShopping}],
          US:[{name:"Google Shopping (US)",url:googleShopping}],
          AR:[{name:"Google Shopping",url:googleShopping}],
          CO:[{name:"Google Shopping",url:googleShopping}],
          CL:[{name:"Google Shopping",url:googleShopping}],
          PE:[{name:"Google Shopping",url:googleShopping}],
        }[country]) || [{name:"Google Shopping",url:googleShopping}];

        const marketplaces = [{name:"Amazon",url:amazon},{name:"eBay",url:ebay}];
        if (mercadolibre) marketplaces.push({name:"MercadoLibre",url:mercadolibre});
        const meta = [{name:"Google Shopping",url:googleShopping},{name:"Google (web)",url:googleWeb}];
        return { meta, marketplaces, comparadores };
      }

      const { meta, marketplaces, comparadores } = buildLinks(q, c);

      function paint(where, arr){
        const el = byId(where);
        el.innerHTML = (arr||[]).map(x=>`<a href="${x.url}" target="_blank" rel="noopener">${x.name}</a>`).join(' ');
      }
      paint('meta', meta);
      paint('mkt', marketplaces);
      paint('comp', comparadores);

      byId('links-wrap').style.display = 'grid';
      window.scrollTo({ top: document.body.scrollHeight, behavior:'smooth' });
    });
  </script>
</Base>
