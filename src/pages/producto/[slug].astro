---
import Base from "@/layouts/Base.astro";
import fs from "fs";
import path from "path";
import matter from "gray-matter";
import { marked } from "marked";
import ReviewsBlock from "@/components/ReviewsBlock.astro";
import RatingStars from "@/components/RatingStars.astro";

export async function getStaticPaths() {
  const ROOT = process.cwd();
  const baseDir = path.join(ROOT, "src", "data", "trends");

  const out = [];

  function walk(dir) {
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    for (const e of entries) {
      const full = path.join(dir, e.name);
      if (e.isDirectory()) walk(full);
      else if (e.isFile() && e.name === "index.json") {
        const rel = path.relative(baseDir, full); // yyyy/mm/dd/index.json
        const datePath = path.dirname(rel);      // yyyy/mm/dd
        try {
          const json = JSON.parse(fs.readFileSync(full, "utf-8"));
          for (const it of (json.items || [])) {
            const mdPath = path.join(ROOT, "src", "content", "trends", datePath, `${it.slug}.md`);
            if (fs.existsSync(mdPath)) {
              out.push({
                params: { slug: it.slug },
                props: { mdPath }
              });
            }
          }
        } catch {}
      }
    }
  }

  if (fs.existsSync(baseDir)) walk(baseDir);
  return out;
}

const { mdPath } = Astro.props;

// Lee y procesa el Markdown
const raw = fs.readFileSync(mdPath, "utf-8");
const parsed = matter(raw);
const fm = parsed.data || {};
const html = marked.parse(parsed.content || "");

// Derivados
const title = fm.title || "Producto";
const desc = `Análisis, pros y contras, y dónde comparar precios del producto ${title}.`;
const hero = fm.hero || "/placeholder.jpg";

// Reseñas / rating opcional desde front-matter
// Puedes añadir en cada MD:
// rating: 4.5
// ratingCount: 132
// reviews:
//  - author: "María"
//    rating: 5
//    title: "Muy buen sonido"
//    text: "Para su precio, excelente."
//    date: "2025-09-01"
//    verified: true
const rating = typeof fm.rating === "number" ? fm.rating : null;
const ratingCount = typeof fm.ratingCount === "number" ? fm.ratingCount : null;
const reviews = Array.isArray(fm.reviews) ? fm.reviews : [];

// JSON-LD (Product + AggregateRating si está)
const ld = {
  "@context": "https://schema.org",
  "@type": "Product",
  name: title,
  image: hero,
  description: desc,
};
if (typeof rating === "number" && typeof ratingCount === "number" && ratingCount > 0) {
  ld.aggregateRating = {
    "@type": "AggregateRating",
    ratingValue: String(rating),
    ratingCount: String(ratingCount),
    bestRating: "5",
    worstRating: "1",
  };
}
---

<Base title={`Teknovashop · ${title}`} description={desc}>
  <script type="application/ld+json">
    {JSON.stringify(ld)}
  </script>

  <article class="prod">
    <header class="prod-hero">
      <img src={hero} alt="" width="1280" height="720" loading="eager" />
      <div class="prod-meta card">
        <h1>{title}</h1>
        {typeof rating === 'number' ? (
          <div class="row" style="gap:.5rem;">
            <RatingStars rating={rating} count={ratingCount} />
            <span class="muted">Valoración media</span>
          </div>
        ) : null}
      </div>
    </header>

    <section class="prod-body card">
      <div class="content" set:html={html} />
    </section>

    <ReviewsBlock
      product={{ name: title, image: hero, description: desc }}
      rating={rating}
      ratingCount={ratingCount}
      reviews={reviews}
    />
  </article>

  <style>
    .prod-hero img{
      width:100%; height:auto; border-radius:14px; border:1px solid var(--surface-2);
      background:var(--surface-1);
    }
    .prod-meta{ margin-top:.8rem; }
    .prod-body{ margin-top:1rem; }
    .content :where(h2,h3){ margin-top:.8rem; }
    .content :where(ul,ol){ padding-left:1.2rem; }
    .content blockquote{
      border-left:3px solid var(--surface-3); padding:.4rem .8rem; color:var(--ink-2); background:var(--surface-2); border-radius:10px;
    }
  </style>
</Base>
