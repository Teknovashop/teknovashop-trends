---
import Base from '@/layouts/Base.astro';
import fs from 'node:fs';
import path from 'node:path';

type Item = {
  slug: string;
  title: string;
  niche?: string;
  score?: number;
  date?: string;
  summary?: string;
  pros?: string[] | string;
  cons?: string[] | string;
  links?: {
    amazon?: string;
    aliexpress?: string;
    shein?: string;
  };
  hero?: string;
};

/** Lee todos los index.json dentro de src/data/**/index.json y devuelve items con su fecha */
function loadAllItems(): Item[] {
  const root = path.join(Astro.srcDir, 'data');
  const results: Item[] = [];

  function scan(relParts: string[] = []) {
    const dir = path.join(root, ...relParts);
    if (!fs.existsSync(dir)) return;
    const entries = fs.readdirSync(dir, { withFileTypes: true });

    for (const e of entries) {
      if (e.isDirectory()) {
        scan([...relParts, e.name]);
      } else if (e.isFile() && e.name === 'index.json') {
        const file = path.join(dir, e.name);
        try {
          const json = JSON.parse(fs.readFileSync(file, 'utf8')) as {
            date?: string;
            items?: any[];
          };
          const dateStr = json?.date ?? relParts.join('/');
          const items = Array.isArray(json?.items) ? json.items : [];
          for (const it of items) {
            if (it && typeof it.slug === 'string') {
              results.push({ ...it, date: it.date ?? dateStr });
            }
          }
        } catch {
          // Ignorar archivos corruptos para que el build no se caiga
        }
      }
    }
  }

  scan([]);
  // Quitar duplicados por slug (nos quedamos con el último encontrado)
  const map = new Map<string, Item>();
  for (const it of results) map.set(it.slug, it);
  return Array.from(map.values());
}

/** Devuelve un item por slug */
function getBySlug(slug: string): Item | undefined {
  const items = loadAllItems();
  return items.find((it) => it.slug === slug);
}

export async function getStaticPaths() {
  const items = loadAllItems();
  // Genera paths solo para slugs válidos
  return items
    .filter((it) => it?.slug)
    .map((it) => ({ params: { slug: it.slug } }));
}

const { slug } = Astro.params;

// Cargar el registro
const record = getBySlug(String(slug));

if (!record) {
  // Lanzar un error controlado para que Vercel muestre 404 de forma limpia
  throw new Error(`Producto no encontrado: ${slug}`);
}

const title = record.title ?? 'Producto';
const niche = record.niche ?? '';
const score = typeof record.score === 'number' ? record.score : undefined;
const dateStr = record.date ?? '';
const summary = record.summary ?? 'Tendencia destacada del día.';
const hero = record.hero && typeof record.hero === 'string' ? record.hero : '/placeholder.jpg';

const pros: string[] =
  Array.isArray(record.pros) ? record.pros :
  typeof record.pros === 'string' ? record.pros.split('•').map(s => s.trim()).filter(Boolean) :
  [];

const cons: string[] =
  Array.isArray(record.cons) ? record.cons :
  typeof record.cons === 'string' ? record.cons.split('•').map(s => s.trim()).filter(Boolean) :
  [];

const links = record.links ?? {};
function safeHref(u?: string) {
  if (!u || typeof u !== 'string') return null;
  try { return new URL(u).toString(); } catch { return null; }
}
const amazonURL = safeHref(links.amazon);
const aliURL = safeHref(links.aliexpress);
const sheinURL = safeHref(links.shein);
---

<Base title={title} description={summary}>
  <article class="page">
    <header class="head">
      <h1 class="ttl">{title}</h1>
      <div class="meta">
        {niche && <span class="badge">{niche}</span>}
        {typeof score === 'number' && <span class="muted">· score {score}</span>}
        {dateStr && <span class="muted">· {dateStr}</span>}
      </div>
    </header>

    <figure class="hero-wrap">
      <img
        src={hero}
        alt={title}
        loading="lazy"
        decoding="async"
        class="hero"
      />
    </figure>

    <section class="box">
      <p><b>Resumen:</b> {summary}</p>

      {(pros.length > 0 || cons.length > 0) && (
        <div class="cols">
          {pros.length > 0 && (
            <div>
              <h3>Pros</h3>
              <ul>
                {pros.map((p) => <li>{p}</li>)}
              </ul>
            </div>
          )}
          {cons.length > 0 && (
            <div>
              <h3>Contras</h3>
              <ul>
                {cons.map((c) => <li>{c}</li>)}
              </ul>
            </div>
          )}
        </div>
      )}

      {(amazonURL || aliURL || sheinURL) && (
        <div class="links">
          <h3>Dónde comparar precios</h3>
          <ul>
            {amazonURL && <li><a href={amazonURL} rel="nofollow noopener" target="_blank">Amazon (ES)</a></li>}
            {aliURL && <li><a href={aliURL} rel="nofollow noopener" target="_blank">AliExpress</a></li>}
            {sheinURL && <li><a href={sheinURL} rel="nofollow noopener" target="_blank">SHEIN</a></li>}
          </ul>
        </div>
      )}
    </section>
  </article>

  <style>
    .page { display:block; }
    .head { margin-bottom: .75rem; }
    .ttl { margin: 0 0 .25rem 0; font-size: clamp(1.35rem, 2.2vw + 1rem, 2rem); }
    .meta { display:flex; align-items:center; gap:.5rem; flex-wrap: wrap; }
    .badge { display:inline-block; padding:.18rem .55rem; border-radius:999px; background:rgba(0,196,199,.15); color:#93f7f9; font-size:.8rem; }
    .muted { color:#9fb3b8; font-size:.9rem; }

    .hero-wrap { margin: .75rem 0 1rem; }
    .hero {
      width:100%;
      max-height: 460px;
      object-fit: cover;
      border-radius: 16px;
      border: 1px solid rgba(255,255,255,.08);
      background: #0d1319;
      display:block;
    }

    .box { background: var(--card, #0f151b); border: 1px solid var(--muted, rgba(255,255,255,.08)); border-radius: 16px; padding: 1rem; }
    .cols { display:grid; grid-template-columns: repeat(auto-fit, minmax(220px,1fr)); gap:1rem; margin-top:.25rem; }
    h3 { margin:.25rem 0 .5rem; }
    .links ul { margin:.25rem 0 0; padding-left:1.1rem; }
    .links a { color: var(--brand, #00c4c7); text-decoration: none; }
    .links a:hover { text-decoration: underline; }
  </style>
</Base>
